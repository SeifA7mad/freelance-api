// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum ExperinceLevel {
  EXPERT
  INTERMEDIATE
  Entry_LEVEL
}

enum PaymentTransactionType {
  WITHDRAWAL
  DEPOSIT
  SERVICE_FEE
  FIXED_PRICE
}

enum JobCategory {
  WEB_DEVOLPMENT
}

enum Visability {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum PaymentType {
  FIXED_PRICE
}

enum ProjectType {
  ONE_TIME
  ONGOING
}

model Account {
  id       String @id @default(uuid())
  userName String @unique
  email    String @unique
  password String
  user     User?
}

model User {
  id             String           @id @default(uuid())
  firstName      String
  lastName       String
  bio            String?
  profilePicture String?
  jwtToken       String?
  timeZone       DateTime
  accountId      String           @unique
  account        Account          @relation(fields: [accountId], references: [id], onDelete: Cascade)
  freelancer     Freelancer?
  client         Client?
  creditCards    CreditCardInfo[]

  senderPaymentTransaction   PaymentTransaction[] @relation("TransactionFromUser")
  receiverPaymentTransaction PaymentTransaction[] @relation("TransactionToUser")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([accountId])
}

model Freelancer {
  id               String            @id @unique
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  freelancerSkills FreelancerSkill[]
  jobTitle         String
  jobCategory      JobCategory
  experinceLevel   ExperinceLevel
  jobInvitations   JobInvitation[]
  proposals        Proposal[]
}

model Client {
  id   String @id @unique
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
  jobs Job[]
}

model Skill {
  id    String         @id @default(uuid())
  name  String
  level ExperinceLevel

  jobSkills        JobSkill[]
  freelancerSkills FreelancerSkill[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FreelancerSkill {
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([freelancerId, skillId])
  @@index([freelancerId, skillId])
}

model PaymentTransaction {
  id          String                 @id @default(uuid())
  date        DateTime               @default(now())
  description String
  amount      Float
  type        PaymentTransactionType

  senderId String?
  sender   User?   @relation("TransactionFromUser", fields: [senderId], references: [id], onDelete: NoAction)

  receiverId String?
  receiver   User?   @relation("TransactionToUser", fields: [receiverId], references: [id], onDelete: NoAction)

  @@index([senderId, receiverId])
}

model CreditCardInfo {
  cardNumber     String   @id
  holderName     String
  expiryMonth    DateTime
  expiryYear     DateTime
  billingAddress String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Job {
  id                     String         @id @default(uuid())
  title                  String
  category               JobCategory
  visability             Visability     @default(PUBLIC)
  location               String
  description            String         @db.LongText
  paymentType            PaymentType
  projectType            ProjectType
  projectPrice           Float
  projectLength          String
  link                   String
  requiredSkills         JobSkill[]
  requiredExperinceLevel ExperinceLevel

  clientId String
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  postedAt     DateTime?
  lastViewedAt DateTime?

  jobInvitations JobInvitation[]
  Proposals      Proposal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

model Proposal {
  id            String @default(uuid())
  bid           Float
  projectLength String
  attachments   String
  coverLetter   String @db.LongText

  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  jobId String
  job   Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, freelancerId, jobId])
  @@index([freelancerId, jobId])
}

model JobSkill {
  jobId   String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skillId String
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
  @@index([jobId, skillId])
}

model JobInvitation {
  jobId        String
  job          Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  accepted     Boolean    @default(false)

  @@id([jobId, freelancerId])
  @@index([jobId, freelancerId])
}
