generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id           String  @id @default(uuid())
  userName     String  @unique
  email        String  @unique
  password     String
  refreshToken String?
  user         User?
}

model User {
  id                         String               @id @default(uuid())
  firstName                  String
  lastName                   String
  bio                        String?
  profilePicture             String?
  timeZone                   DateTime
  createdAt                  DateTime             @default(now())
  updatedAt                  DateTime             @updatedAt
  accountId                  String               @unique
  account                    Account              @relation(fields: [accountId], references: [id], onDelete: Cascade)
  freelancer                 Freelancer?
  client                     Client?
  admin                      Admin?
  senderPaymentTransaction   PaymentTransaction[] @relation("TransactionFromUser")
  receiverPaymentTransaction PaymentTransaction[] @relation("TransactionToUser")
  creditCards                CreditCardInfo[]
  chatMessages               ChatMessage[]

  @@index([accountId])
}

model Freelancer {
  id               String            @id @unique
  jobTitle         String
  jobCategory      JobCategory
  experienceLevel  ExperienceLevel
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  freelancerSkills FreelancerSkill[]
  proposals        Proposal[]
  jobInvitations   JobInvitation[]
  contracts        Contract[]
}

model Client {
  id        String     @id @unique
  user      User       @relation(fields: [id], references: [id], onDelete: Cascade)
  jobs      Job[]
  contracts Contract[]
  project   Project[]
}

model Admin {
  id         String           @id @unique
  user       User             @relation(fields: [id], references: [id], onDelete: Cascade)
  privileges AdminPrivilege[]
}

model Privilege {
  id         String           @id @default(uuid())
  name       PrivilegeType
  privileges AdminPrivilege[]
}

model AdminPrivilege {
  adminId     String
  privilegeId String
  Admin       Admin     @relation(fields: [adminId], references: [id])
  Privilege   Privilege @relation(fields: [privilegeId], references: [id])

  @@id([adminId, privilegeId])
  @@index([adminId])
  @@index([privilegeId])
}

model Skill {
  id               String            @id @default(uuid())
  name             String            @unique
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  freelancerSkills FreelancerSkill[]
  jobSkills        JobSkill[]
}

model FreelancerSkill {
  freelancerId String
  skillId      String
  freelancer   Freelancer      @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  skill        Skill           @relation(fields: [skillId], references: [id], onDelete: Cascade)
  level        ExperienceLevel

  @@id([freelancerId, skillId])
  @@index([freelancerId])
  @@index([skillId])
}

model PaymentTransaction {
  id          String                 @id @default(uuid())
  date        DateTime               @default(now())
  description String
  amount      Float
  type        PaymentTransactionType
  senderId    String?
  receiverId  String?
  sender      User?                  @relation("TransactionFromUser", fields: [senderId], references: [id], onDelete: NoAction)
  receiver    User?                  @relation("TransactionToUser", fields: [receiverId], references: [id], onDelete: NoAction)

  @@index([senderId])
  @@index([receiverId])
}

model CreditCardInfo {
  cardNumber     String   @id
  holderName     String
  expiryMonth    DateTime
  expiryYear     DateTime
  billingAddress String
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Project {
  id            String      @unique @default(uuid())
  title         String
  category      JobCategory
  description   String      @db.LongText
  paymentType   PaymentType
  type          ProjectType
  price         Float
  projectLength String
  job           Job?
  contract      Contract?
  clientId      String
  client        Client      @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@id([id, clientId])
  @@index([clientId])
}

model Job {
  id                      String          @unique @default(uuid())
  title                   String
  visibility              Visibility      @default(PUBLIC)
  location                String
  link                    String
  requiredExperienceLevel ExperienceLevel
  postedAt                DateTime?
  lastViewedAt            DateTime?
  requiredSkills          JobSkill[]

  projectId String  @unique
  project   Project @relation(fields: [projectId], references: [id], onDelete: Restrict)
  clientId  String
  client    Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  Proposals      Proposal[]
  jobInvitations JobInvitation[]
  contract       Contract?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([id, clientId])
  @@index([clientId, projectId])
}

model ProposalAttachments {
  id         String   @id @default(uuid())
  url        String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proposalId String
  proposal   Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade)

  @@index([proposalId])
}

model Proposal {
  id            String @id @default(uuid())
  bid           Float
  projectLength String
  coverLetter   String @db.LongText

  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)
  jobId        String
  job          Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)

  attachments ProposalAttachments[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([freelancerId, id])
  @@unique([freelancerId, jobId])
  @@index([freelancerId])
  @@index([jobId])
}

model JobSkill {
  jobId   String
  skillId String
  job     Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill   Skill  @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@id([jobId, skillId])
  @@index([jobId])
  @@index([skillId])
}

model JobInvitation {
  jobId        String
  freelancerId String
  accepted     Boolean    @default(false)
  job          Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id], onDelete: Cascade)

  @@id([jobId, freelancerId])
  @@index([jobId])
  @@index([freelancerId])
}

model ContractAttachments {
  id         String   @id @default(uuid())
  url        String
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
}

model ContractActivities {
  id         String   @id @default(uuid())
  activity   String
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
}

model ContractFeedback {
  id         String   @id @default(uuid())
  feedback   String
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
}

model Millestone {
  id          String           @id @default(uuid())
  name        String
  amount      Float
  dueDate     DateTime?
  description String?          @db.LongText
  status      MillestoneStatus @default(PENDING)
  contractId  String
  contract    Contract         @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
}

model ChatMessage {
  id         String  @id @default(uuid())
  text       String?
  attachment String?

  userId     String
  user       User     @relation(fields: [userId], references: [id])
  contractId String
  contract   Contract @relation(fields: [contractId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([contractId])
  @@index([userId])
}

model Contract {
  id              String         @id @default(uuid())
  startDate       DateTime       @default(now())
  endDate         DateTime?
  status          ContractStatus @default(INACTIVE)
  link            String
  fundedPayment   Float
  receivedPayment Float

  projectId    String?    @unique
  project      Project?   @relation(fields: [projectId], references: [id], onDelete: Restrict)
  jobId        String?    @unique
  job          Job?       @relation(fields: [jobId], references: [id], onDelete: Restrict)
  freelancerId String
  freelancer   Freelancer @relation(fields: [freelancerId], references: [id])
  clientId     String
  client       Client     @relation(fields: [clientId], references: [id], onDelete: Cascade)

  attachments  ContractAttachments[]
  activities   ContractActivities[]
  feedbacks    ContractFeedback[]
  millestones  Millestone[]
  chatMessages ChatMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([freelancerId])
  @@index([clientId])
  @@index([jobId])
}

enum ExperienceLevel {
  EXPERT
  INTERMEDIATE
  Entry_LEVEL
}

enum PaymentTransactionType {
  WITHDRAWAL
  DEPOSIT
  SERVICE_FEE
  FIXED_PRICE
}

enum JobCategory {
  WEB_DEVOLPMENT
}

enum Visibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

enum PaymentType {
  FIXED_PRICE
}

enum ProjectType {
  ONE_TIME
  ONGOING
}

enum ContractStatus {
  COMPLETED
  ACTIVE
  INACTIVE
}

enum MillestoneStatus {
  PENDING
  INPROGRESS
  FULFILLED
  INREVIEW
}

enum PrivilegeType {
  READ
  WRITE
  MANAGE
}
